# init script functions library for desktop linux systems

[ -n "$ZAPRET_BASE" ] || ZAPRET_BASE=/opt/zapret
# SHOULD EDIT config
. "$ZAPRET_BASE/config"

PIDDIR=/var/run

IPSET_CR=$ZAPRET_BASE/ipset/create_ipset.sh

QNUM=200
NFQWS=$ZAPRET_BASE/nfq/nfqws
NFQWS_OPT_BASE="--qnum=$QNUM"

TPWS_USER=tpws
TPPORT_HTTP=1188
TPPORT_HTTPS=1189
TPWS=$ZAPRET_BASE/tpws/tpws
TPWS_HOSTLIST=$ZAPRET_BASE/ipset/zapret-hosts.txt.gz
[ -f "$TPWS_HOSTLIST" ] || TPWS_HOSTLIST=$ZAPRET_BASE/ipset/zapret-hosts-user.txt
TPWS_OPT_BASE="--user=$TPWS_USER --bind-addr=127.0.0.1"
TPWS_OPT_BASE6="--user=$TPWS_USER --bind-addr=::1"
# first wait for lan to ifup, then wait for bind-wait-ip-linklocal seconds for link local address and bind-wait-ip for any ipv6 as the worst case
TPWS_OPT_BASE6_PRE="--user=$TPWS_USER --bind-linklocal=prefer --bind-wait-ifup=30 --bind-wait-ip=30 --bind-wait-ip-linklocal=3"
TPWS_OPT_BASE_HTTP="--port=$TPPORT_HTTP"
TPWS_OPT_BASE_HTTPS="--port=$TPPORT_HTTPS"

[ -n "$IFACE_WAN" ] && IPT_OWAN="-o $IFACE_WAN"
[ -n "$IFACE_WAN" ] && IPT_IWAN="-i $IFACE_WAN"
[ -n "$IFACE_LAN" ] && IPT_ILAN="-i $IFACE_LAN"

# max wait time for the link local ipv6 on the LAN interface
LINKLOCAL_WAIT_SEC=5

exists()
{
	which $1 >/dev/null 2>/dev/null
}

ipt()
{
	iptables -C $@ 2>/dev/null || iptables -I $@
}
ipt_del()
{
	iptables -C $@ 2>/dev/null && iptables -D $@
}
ipt6()
{
	ip6tables -C $@ 2>/dev/null || ip6tables -I $@
}
ipt6_del()
{
	ip6tables -C $@ 2>/dev/null && ip6tables -D $@
}

# there's no route_localnet for ipv6
# the best we can is to route to link local of the incoming interface
# OUTPUT - can DNAT to ::1
# PREROUTING - can't DNAT to ::1. can DNAT to link local of -i interface or to any global addr
# not a good idea to expose tpws to the world (bind to ::)

get_ipv6_linklocal()
{
	# $1 - interface name. if empty - any interface
	local dev
	[ -n "$1" ] && dev="dev $1"
	ip addr show $dev | sed -e 's/^.*inet6 \([^ ]*\)\/[0-9]* scope link.*$/\1/;t;d' | head -n 1
}
get_ipv6_global()
{
	# $1 - interface name. if empty - any interface
	local dev
	[ -n "$1" ] && dev="dev $1"
	ip addr show $dev | sed -e 's/^.*inet6 \([^ ]*\)\/[0-9]* scope global.*$/\1/;t;d' | head -n 1
}

iface_is_up()
{	
	# $1 - interface name
	[ -f /sys/class/net/$1/operstate ] || return
	local state
	read state </sys/class/net/$1/operstate
	[ "$state" != "down" ]
}
wait_ifup()
{
	# $1 - interface name
	local ct=0
	while
		iface_is_up $1 && return
		[ "$ct" -ge "$IFUP_WAIT_SEC" ] && break
		echo waiting for ifup of $1 for another $(($IFUP_WAIT_SEC - $ct)) seconds ...
		ct=$(($ct+1))
		sleep 1
	do :; done
	false
}


dnat6_target()
{
	# get target ip address for DNAT. prefer link locals
	# tpws should be as inaccessible from outside as possible
	# link local address can appear not immediately after ifup
	[ -n "$DNAT6_TARGET" ] || {

		local ct=0
		while
			DNAT6_TARGET=$(get_ipv6_linklocal $IFACE_LAN)
			[ -n "$DNAT6_TARGET" ] && break
			[ "$ct" -ge "$LINKLOCAL_WAIT_SEC" ] && break
			echo waiting for the link local for another $(($LINKLOCAL_WAIT_SEC - $ct)) seconds ...
			ct=$(($ct+1))
			sleep 1
		do :; done

		[ -z "$DNAT6_TARGET" ] && {
		    	echo no link local. getting global
			DNAT6_TARGET=$(get_ipv6_global $IFACE_LAN)
		}
	}
}

fw_tpws_add()
{
	# $1 - iptable filter for ipv4
	# $2 - iptable filter for ipv6
	# $3 - tpws port
	[ "$DISABLE_IPV4" != "1" ] && {
		echo "Adding iptables rule for tpws : $1"
		[ -n "$IFACE_LAN" ] && {
			ipt PREROUTING -t nat $IPT_ILAN -p tcp $1 -j DNAT --to 127.0.0.1:$3
	 	}
		ipt OUTPUT -t nat $IPT_OWAN -m owner ! --uid-owner $TPWS_USER -p tcp $1 -j DNAT --to 127.0.0.1:$3
	}
	[ "$DISABLE_IPV6" != "1" ] && {
		echo "Adding ip6tables rule for tpws : $2"
		[ -n "$IFACE_LAN" ] && {
			dnat6_target
			ipt6 PREROUTING -t nat $IPT_ILAN -p tcp $2 -j DNAT --to [$DNAT6_TARGET]:$3
	 	}
		ipt6 OUTPUT -t nat $IPT_OWAN -m owner ! --uid-owner $TPWS_USER -p tcp $2 -j DNAT --to [::1]:$3
	}
}
fw_tpws_del()
{
	# $1 - iptable filter for ipv4
	# $2 - iptable filter for ipv6
	# $3 - tpws port
	[ "$DISABLE_IPV4" != "1" ] && {
		echo "Deleting iptables rule for tpws : $1"
		[ -n "$IFACE_LAN" ] && {
			ipt_del PREROUTING -t nat $IPT_ILAN -p tcp $1 -j DNAT --to 127.0.0.1:$3
		}
		ipt_del OUTPUT -t nat $IPT_OWAN -m owner ! --uid-owner $TPWS_USER -p tcp $1 -j DNAT --to 127.0.0.1:$3
	}
	[ "$DISABLE_IPV6" != "1" ] && {
		echo "Deleting ip6tables rule for tpws : $2"
		[ -n "$IFACE_LAN" ] && {
			dnat6_target
			ipt6_del PREROUTING -t nat $IPT_ILAN -p tcp $2 -j DNAT --to [$DNAT6_TARGET]:$3
		}
		ipt6_del OUTPUT -t nat $IPT_OWAN -m owner ! --uid-owner $TPWS_USER -p tcp $2 -j DNAT --to [::1]:$3
	}
}

fw_nfqws_add_pre()
{
	# $1 - iptable filter for ipv4
	# $2 - iptable filter for ipv6
	[ "$DISABLE_IPV4" != "1" ] && {
		echo "Adding iptables rule for nfqws prerouting : $1"
		ipt PREROUTING -t raw $IPT_IWAN -p tcp --tcp-flags SYN,ACK SYN,ACK $1 -j NFQUEUE --queue-num $QNUM --queue-bypass
	}
	[ "$DISABLE_IPV6" != "1" ] && {
		echo "Adding ip6tables rule for nfqws prerouting : $2"
		ipt6 PREROUTING -t raw $IPT_IWAN -p tcp --tcp-flags SYN,ACK SYN,ACK $2 -j NFQUEUE --queue-num $QNUM --queue-bypass
	}
}
fw_nfqws_del_pre()
{
	# $1 - iptable filter for ipv4
	# $2 - iptable filter for ipv6
	[ "$DISABLE_IPV4" != "1" ] && {
		echo "Deleting iptables rule for nfqws prerouting : $1"
		ipt_del PREROUTING -t raw $IPT_IWAN -p tcp --tcp-flags SYN,ACK SYN,ACK $1 -j NFQUEUE --queue-num $QNUM --queue-bypass
	}
	[ "$DISABLE_IPV6" != "1" ] && {
		echo "Deleting ip6tables rule for nfqws prerouting : $2"
		ipt6_del PREROUTING -t raw $IPT_IWAN -p tcp --tcp-flags SYN,ACK SYN,ACK $2 -j NFQUEUE --queue-num $QNUM --queue-bypass
	}
}
fw_nfqws_add_post()
{
	# $1 - iptable filter for ipv4
	# $2 - iptable filter for ipv6
	[ "$DISABLE_IPV4" != "1" ] && {
		echo "Adding iptables rule for nfqws postrouting : $1"
		ipt POSTROUTING -t mangle $IPT_OWAN -p tcp $1 -j NFQUEUE --queue-num $QNUM --queue-bypass
	}
	[ "$DISABLE_IPV6" != "1" ] && {
		echo "Adding ip6tables rule for nfqws postrouting : $2"
		ipt6 POSTROUTING -t mangle $IPT_OWAN -p tcp $2 -j NFQUEUE --queue-num $QNUM --queue-bypass
	}
}
fw_nfqws_del_post()
{
	# $1 - iptable filter for ipv4
	# $2 - iptable filter for ipv6
	[ "$DISABLE_IPV4" != "1" ] && {
		echo "Deleting iptables rule for nfqws postrouting : $1"
		ipt_del POSTROUTING -t mangle $IPT_OWAN -p tcp $1 -j NFQUEUE --queue-num $QNUM --queue-bypass
	}
	[ "$DISABLE_IPV6" != "1" ] && {
		echo "Deleting ip6tables rule for nfqws postrouting : $2"
		ipt6_del POSTROUTING -t mangle $IPT_OWAN -p tcp $2 -j NFQUEUE --queue-num $QNUM --queue-bypass
	}
}


run_daemon()
{
	# $1 - daemon number : 1,2,3,...
	# $2 - daemon
	# $3 - daemon args
	# use $PIDDIR/$DAEMONBASE$1.pid as pidfile
	local DAEMONBASE=$(basename $2)
	local PIDFILE=$PIDDIR/$DAEMONBASE$1.pid
	echo "Starting daemon $1: $2 $3"
	if exists start-stop-daemon ; then
		start-stop-daemon --start --pidfile "$PIDFILE" --background --make-pidfile --exec "$2" -- $3
	else
		if [ -f "$PIDFILE" ] && pgrep -F "$PIDFILE" "$DAEMONBASE" >/dev/null; then
			echo already running
		else
			"$2" $3 >/dev/null 2>/dev/null &
			PID=$!
			if [ -n "$PID" ]; then
				echo $PID >$PIDFILE
			else
				echo could not start daemon $1 : $2 $3
				false
			fi
		fi
	fi
}
stop_daemon()
{
	# $1 - daemon number : 1,2,3,...
	# $2 - daemon
	# use $PIDDIR/$DAEMONBASE$1.pid as pidfile
	local DAEMONBASE=$(basename $2)
	local PIDFILE=$PIDDIR/$DAEMONBASE$1.pid
	echo "Stopping daemon $1: $2"
	if exists start-stop-daemon ; then
		start-stop-daemon --stop --pidfile "$PIDFILE" --exec "$2"
	else
		if [ -f "$PIDFILE" ]; then
			read PID <"$PIDFILE"
			kill $PID
			rm -f "$PIDFILE"
		else
			echo no pidfile : $PIDFILE
		fi
	fi
}

prepare_tpws()
{
	# $TPWS_USER is required to prevent redirection of the traffic originating from TPWS itself
	# otherwise infinite loop will occur
	# also its good idea not to run tpws as root
	id -u $TPWS_USER >/dev/null 2>/dev/null || useradd --no-create-home --system --shell /bin/false $TPWS_USER
	# otherwise linux kernel will treat 127.0.0.1 as "martian" ip and refuse routing to it
	# NOTE : kernels <3.6 do not have this feature. consider upgrading or change DNAT to REDIRECT and do not bind to 127.0.0.1
	[ -n "$IFACE_LAN" ] && sysctl -qw net.ipv4.conf.$IFACE_LAN.route_localnet=1
}

run_tpws()
{
	prepare_tpws
	[ "$DISABLE_IPV4" != "1" ] && run_daemon $1 $TPWS "$TPWS_OPT_BASE $2"
	[ "$DISABLE_IPV6" != "1" ] && {
		run_daemon $((60+$1)) $TPWS "$TPWS_OPT_BASE6 $2"
		[ -n "$IFACE_LAN" ] && run_daemon $((660+$1)) $TPWS "$TPWS_OPT_BASE6_PRE --bind-iface6=$IFACE_LAN $2"
	}
}
stop_tpws()
{
	[ "$DISABLE_IPV4" != "1" ] && stop_daemon $1 $TPWS
	[ "$DISABLE_IPV6" != "1" ] && {
		stop_daemon $((60+$1)) $TPWS
		[ -n "$IFACE_LAN" ] && stop_daemon $((660+$1)) $TPWS
	}
}


create_ipset()
{
	echo "Creating ipset"
	"$IPSET_CR"
}


zapret_apply_firewall()
{
	case "${MODE}" in
	    tpws_hostlist)
			prepare_tpws
			fw_tpws_add "--dport 80" "--dport 80" $TPPORT_HTTP
			;;
	    tpws_ipset)
			create_ipset
			prepare_tpws
			fw_tpws_add "--dport 80 -m set --match-set zapret dst" "--dport 80 -m set --match-set zapret6 dst" $TPPORT_HTTP
			;;
	    tpws_ipset_https)
			create_ipset
			prepare_tpws
			fw_tpws_add "--dport 80 -m set --match-set zapret dst" "--dport 80 -m set --match-set zapret6 dst" $TPPORT_HTTP
			fw_tpws_add "--dport 443 -m set --match-set zapret dst" "--dport 443 -m set --match-set zapret6 dst" $TPPORT_HTTPS
			;;
	    tpws_all)
			prepare_tpws
			fw_tpws_add "--dport 80" "--dport 80" $TPPORT_HTTP
			;;
	    tpws_all_https)
			prepare_tpws
			fw_tpws_add "--dport 80" "--dport 80" $TPPORT_HTTP
			fw_tpws_add "--dport 443" "--dport 443" $TPPORT_HTTPS
			;;
	    nfqws_ipset)
			create_ipset
			fw_nfqws_add_pre "--sport 80 -m set --match-set zapret src" "--sport 80 -m set --match-set zapret6 src"
			fw_nfqws_add_post "--dport 80 -m set --match-set zapret dst" "--dport 80 -m set --match-set zapret6 dst"
			;;
	    nfqws_ipset_https)
			create_ipset
			fw_nfqws_add_pre "-m multiport --sports 80,443 -m set --match-set zapret src" "-m multiport --sports 80,443 -m set --match-set zapret6 src"
			fw_nfqws_add_post "--dport 80 -m set --match-set zapret dst" "--dport 80 -m set --match-set zapret6 dst"
			;;
	    nfqws_all)
			fw_nfqws_add_pre "--sport 80" "--sport 80"
			fw_nfqws_add_post "--dport 80" "--dport 80"
			;;
	    nfqws_all_https)
			fw_nfqws_add_pre "-m multiport --sports 80,443" "-m multiport --sports 80,443"
			fw_nfqws_add_post "--dport 80" "--dport 80"
			;;
	    ipset)
			create_ipset
			;;
	    custom)
			# PLACEHOLDER
			echo !!! NEED ATTENTION !!!
			echo Configure iptables for required actions
			echo Study how other sections work
			;;
	esac
}
zapret_run_daemons()
{
	case "${MODE}" in
	    tpws_hostlist)
			run_tpws 1 "$TPWS_OPT_BASE_HTTP $TPWS_OPT_HTTP --hostlist=$TPWS_HOSTLIST"
			;;
	    tpws_ipset)
			run_tpws 1 "$TPWS_OPT_BASE_HTTP $TPWS_OPT_HTTP"
			;;
	    tpws_ipset_https|tpws_all_https)
			run_tpws 1 "$TPWS_OPT_BASE_HTTP $TPWS_OPT_HTTP"
			run_tpws 2 "$TPWS_OPT_BASE_HTTPS $TPWS_OPT_HTTPS"
			;;
	    tpws_all)
			run_tpws 1 "$TPWS_OPT_BASE_HTTP $TPWS_OPT_HTTP"
			;;
	    nfqws_ipset|nfqws_ipset_https|nfqws_all|nfqws_all_https)
			run_daemon 1 $NFQWS "$NFQWS_OPT_BASE $NFQWS_OPT"
			;;
	    ipset)
			create_ipset
			;;
	    custom)
			# PLACEHOLDER
			echo !!! NEED ATTENTION !!!
			echo Start daemon\(s\)
			echo Study how other sections work
			run_daemon 1 /bin/sleep 20
			;;
	esac
}

zapret_unapply_firewall()
{
	case "${MODE}" in
	    tpws_hostlist|tpws_all)
			fw_tpws_del "--dport 80" "--dport 80" $TPPORT_HTTP
			;;
	    tpws_ipset)
			fw_tpws_del "--dport 80 -m set --match-set zapret dst" "--dport 80 -m set --match-set zapret6 dst" $TPPORT_HTTP
			;;
	    tpws_ipset_https)
			fw_tpws_del "--dport 80 -m set --match-set zapret dst" "--dport 80 -m set --match-set zapret6 dst" $TPPORT_HTTP
			fw_tpws_del "--dport 443 -m set --match-set zapret dst" "--dport 443 -m set --match-set zapret6 dst" $TPPORT_HTTPS
			;;
	    tpws_all_https)
			fw_tpws_del "--dport 80" "--dport 80" $TPPORT_HTTP
			fw_tpws_del "--dport 443" "--dport 443" $TPPORT_HTTPS
			;;
	    nfqws_ipset)
			fw_nfqws_del_pre "--sport 80 -m set --match-set zapret src" "--sport 80 -m set --match-set zapret6 src"
			fw_nfqws_del_post "--dport 80 -m set --match-set zapret dst" "--dport 80 -m set --match-set zapret6 dst"
			;;
	    nfqws_ipset_https)
			fw_nfqws_del_pre "-m multiport --sports 80,443 -m set --match-set zapret src" "-m multiport --sports 80,443 -m set --match-set zapret6 src"
			fw_nfqws_del_post "--dport 80 -m set --match-set zapret dst" "--dport 80 -m set --match-set zapret6 dst"
			;;
	    nfqws_all)
			fw_nfqws_del_pre "--sport 80" "--sport 80"
			fw_nfqws_del_post "--dport 80" "--dport 80"
			;;
	    nfqws_all_https)
			fw_nfqws_del_pre "-m multiport --sports 80,443" "-m multiport --sports 80,443"
			fw_nfqws_del_post "--dport 80" "--dport 80"
			;;
	    custom)
			# PLACEHOLDER
			echo !!! NEED ATTENTION !!!
			echo Clear firewall rules here. Remove iptables changes made previously.
			echo Study how other sections work.
			;;
	esac
}
zapret_stop_daemons()
{
	case "${MODE}" in
	    tpws_hostlist|tpws_all|tpws_ipset)
			stop_tpws 1
			;;
	    tpws_ipset_https|tpws_all_https)
			stop_tpws 1
			stop_tpws 2
			;;
	    nfqws_ipset|nfqws_ipset_https|nfqws_all|nfqws_all_https)
			stop_daemon 1 $NFQWS
			;;
	    custom)
			# PLACEHOLDER
			echo !!! NEED ATTENTION !!!
			echo Stop daemon\(s\) previously started.
			echo Study how other sections work.
			;;
	esac
}
